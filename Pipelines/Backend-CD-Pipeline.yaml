#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  azureServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kv-banking-app"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch all secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: '*'
              RunAsPreJob: false
            displayName: "Fetch Secrets from Azure Key Vault"

          # Replace placeholders in secret YAML and deployment YAML
          - powershell: |
              Write-Host "Injecting secrets into YAML and replacing deployment placeholders..."

              $secretFile = "$(secretFile)"
              $deploymentFile = "$(deploymentFile)"

              # Map Key Vault secrets (pipeline variables) to environment variables
              $env:DB_USER       = "$(DB_USER)"
              $env:DB_PASSWORD   = "$(DB_PASSWORD)"
              $env:DB_URL        = "$(DB_URL)"
              $env:MAIL_USERNAME = "$(MAIL_USERNAME)"
              $env:MAIL_PASSWORD = "$(MAIL_PASSWORD)"
              $env:JWT_SECRET_KEY = "$(JWT_SECRET_KEY)"

              # Pipeline variables
              $ACR_NAME   = "$(acrName)"
              $IMAGE_NAME = "$(imageName)"
              $IMAGE_TAG  = "$(imageTag)"

              # Validate files
              if (-not (Test-Path $secretFile)) {
                  Write-Error "Secret file not found: $secretFile"
                  exit 1
              }
              if (-not (Test-Path $deploymentFile)) {
                  Write-Error "Deployment file not found: $deploymentFile"
                  exit 1
              }

              # Debug: List all environment variables fetched from Key Vault
              Write-Host "`n--- Fetched Secrets ---"
              Write-Host "DB_USER: $env:DB_USER"
              Write-Host "DB_PASSWORD: $env:DB_PASSWORD"
              Write-Host "DB_URL: $env:DB_URL"
              Write-Host "MAIL_USERNAME: $env:MAIL_USERNAME"
              Write-Host "MAIL_PASSWORD: $env:MAIL_PASSWORD"
              Write-Host "JWT_SECRET_KEY: $env:JWT_SECRET_KEY"

              # Replace placeholders in secret YAML
              $content = Get-Content $secretFile -Raw
              $content = ($content -replace "<DB_USER>", $env:DB_USER)
              $content = ($content -replace "<DB_PASSWORD>", $env:DB_PASSWORD)
              $content = ($content -replace "<DB_URL>", $env:DB_URL)
              $content = ($content -replace "<MAIL_USERNAME>", $env:MAIL_USERNAME)
              $content = ($content -replace "<MAIL_PASSWORD>", $env:MAIL_PASSWORD)
              $content = ($content -replace "<JWT_SECRET_KEY>", $env:JWT_SECRET_KEY)
              Set-Content -Path $secretFile -Value $content -Force
              Write-Host "Replaced secrets in $secretFile"

              # Replace ACR/image details in deployment YAML
              (Get-Content $deploymentFile -Raw) `
                -replace "<ACR_NAME>", $ACR_NAME `
                -replace "<IMAGE_NAME>", $IMAGE_NAME `
                -replace "<TAG>", $IMAGE_TAG |
                Set-Content $deploymentFile -Force
              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy to AKS using PowerShell script
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              ScriptType: 'FilePath'
              ScriptPath: './Pipelines/Backend-CD.ps1'
              ScriptArguments: '$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Deploy Backend to AKS"

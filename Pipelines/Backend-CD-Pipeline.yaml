#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  azureServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kv-banking-app"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch all secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: '*'             # fetch all secrets
              RunAsPreJob: true              # ensures secrets are available as env vars
            displayName: "Fetch Secrets from Azure Key Vault"

          # PowerShell: Replace placeholders in YAML files
          - powershell: |
              Write-Host "Injecting secrets into YAML and replacing deployment placeholders..."

              $secretFile = "$(secretFile)"
              $deploymentFile = "$(deploymentFile)"

              # Map Key Vault secrets to environment variables
              # Azure DevOps converts names: e.g., 'db-user' => 'DB_USER'
              $DB_USER       = $env:DB_USER
              $DB_PASSWORD   = $env:DB_PASSWORD
              $DB_URL        = $env:DB_URL
              $MAIL_USERNAME = $env:MAIL_USERNAME
              $MAIL_PASSWORD = $env:MAIL_PASSWORD
              $JWT_SECRET_KEY = $env:JWT_SECRET_KEY

              $ACR_NAME      = "$(acrName)"
              $IMAGE_NAME    = "$(imageName)"
              $IMAGE_TAG     = "$(imageTag)"

              # Debug: check if secrets are fetched
              Write-Host "`n--- Fetched Secret Values ---"
              Get-ChildItem Env: | Where-Object { $_.Name -match 'DB|MAIL|JWT' } | Sort-Object Name | Format-Table -AutoSize

              # Validate secrets are not empty
              foreach ($s in @("DB_USER","DB_PASSWORD","DB_URL","MAIL_USERNAME","MAIL_PASSWORD","JWT_SECRET_KEY")) {
                  if (-not (Get-Item "Env:$s").Value) {
                      Write-Error "Secret $s is null or empty! Check Key Vault secret name and permissions."
                      exit 1
                  }
              }

              # Replace placeholders in secret YAML
              $content = Get-Content $secretFile -Raw
              $content = ($content -replace "<DB_USER>", [Regex]::Escape($DB_USER))
              $content = ($content -replace "<DB_PASSWORD>", [Regex]::Escape($DB_PASSWORD))
              $content = ($content -replace "<DB_URL>", [Regex]::Escape($DB_URL))
              $content = ($content -replace "<MAIL_USERNAME>", [Regex]::Escape($MAIL_USERNAME))
              $content = ($content -replace "<MAIL_PASSWORD>", [Regex]::Escape($MAIL_PASSWORD))                
              $content = ($content -replace "<JWT_SECRET_KEY>", [Regex]::Escape($JWT_SECRET_KEY))
              
              Set-Content -Path $secretFile -Value $content -Force
              Write-Host "Replaced secrets in $secretFile"

              # Replace ACR/image details in deployment YAML
              (Get-Content $deploymentFile -Raw) `
                -replace "<ACR_NAME>", $ACR_NAME `
                -replace "<IMAGE_NAME>", $IMAGE_NAME `
                -replace "<TAG>", $IMAGE_TAG |
                Set-Content $deploymentFile -Force

              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy to AKS using PowerShell script
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              ScriptType: 'FilePath'
              ScriptPath: './Pipelines/Backend-CD.ps1'
              ScriptArguments: '$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Deploy Backend to AKS"

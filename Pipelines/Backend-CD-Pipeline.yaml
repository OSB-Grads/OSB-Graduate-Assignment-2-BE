#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  azureServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kv-banking-app"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch all secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: '*'             # fetch all secrets
              RunAsPreJob: true              # ensures secrets are available as env vars
            displayName: "Fetch Secrets from Azure Key Vault"

          - powershell: |
              Write-Host "Injecting secrets into YAML and replacing deployment placeholders..."
              
              $secretFile     = "$(secretFile)"
              $deploymentFile = "$(deploymentFile)"
              
              # Fetch secrets from pipeline variables (populated by AzureKeyVault@2)
              $DB_USER       = "$(DB_USER)"
              $DB_PASSWORD   = "$(DB_PASSWORD)"
              $DB_URL        = "$(DB_URL)"
              $MAIL_USERNAME = "$(MAIL_USERNAME)"
              $MAIL_PASSWORD = "$(MAIL_PASSWORD)"
              $JWT_SECRET_KEY = "$(JWT_SECRET_KEY)"
              
              # Pipeline variables for ACR/image
              $ACR_NAME    = "$(acrName)"
              $IMAGE_NAME  = "$(imageName)"
              $IMAGE_TAG   = "$(imageTag)"
              
              # Check if files exist
              if (-not (Test-Path $secretFile)) {
                  Write-Error "Secret file not found: $secretFile"
                  exit 1
              }
              if (-not (Test-Path $deploymentFile)) {
                  Write-Error "Deployment file not found: $deploymentFile"
                  exit 1
              }
              
              Write-Host "`n--- Specific Secret Values ---"
              Write-Host "DB_USER: $DB_USER"
              Write-Host "DB_PASSWORD: $DB_PASSWORD"
              Write-Host "DB_URL: $DB_URL"
              Write-Host "MAIL_USERNAME: $MAIL_USERNAME"
              Write-Host "MAIL_PASSWORD: $MAIL_PASSWORD"
              Write-Host "JWT_SECRET_KEY: $JWT_SECRET_KEY"
              
              # Replace placeholders in secret YAML
              $secretContent = Get-Content $secretFile -Raw
              $secretContent = $secretContent -replace "<DB_USER>", $DB_USER
              $secretContent = $secretContent -replace "<DB_PASSWORD>", $DB_PASSWORD
              $secretContent = $secretContent -replace "<DB_URL>", $DB_URL
              $secretContent = $secretContent -replace "<MAIL_USERNAME>", $MAIL_USERNAME
              $secretContent = $secretContent -replace "<MAIL_PASSWORD>", $MAIL_PASSWORD
              $secretContent = $secretContent -replace "<JWT_SECRET_KEY>", $JWT_SECRET_KEY
              Set-Content -Path $secretFile -Value $secretContent -Force
              Write-Host "Replaced secrets in $secretFile"
              
              # Replace image details in deployment YAML
              $deploymentContent = Get-Content $deploymentFile -Raw
              $deploymentContent = $deploymentContent -replace "<ACR_NAME>", $ACR_NAME
              $deploymentContent = $deploymentContent -replace "<IMAGE_NAME>", $IMAGE_NAME
              $deploymentContent = $deploymentContent -replace "<TAG>", $IMAGE_TAG
              Set-Content -Path $deploymentFile -Value $deploymentContent -Force
              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy to AKS using PowerShell script
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              ScriptType: 'FilePath'
              ScriptPath: './Pipelines/Backend-CD.ps1'
              ScriptArguments: '$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Deploy Backend to AKS"

#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  myServiceConnection: "MyServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kvBankingApp"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    #condition: succeeded('resources.pipeline.backendCI')
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch all secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(myServiceConnection)"
              KeyVaultName: "$(keyVaultName)"
              # Key Vault secret names cannot contain underscores. Use hyphenated secret names here.
              SecretsFilter: 'DB-USER,DB-PASSWORD,DB-URL,MAIL-USERNAME,MAIL-PASSWORD,JWT-SECRET-KEY'
              RunAsPreJob: false
            displayName: "Fetch Secrets from Azure Key Vault"

          - powershell: |
              Write-Host "=== Debug: Environment Variables with DB/MAIL/JWT ==="
              Get-ChildItem Env: | Where-Object { $_.Name -match 'DB|MAIL|JWT' } | Sort-Object Name | Format-Table -AutoSize
            displayName: "Debug - Check Secrets from Key Vault"


          # Replace placeholders in secret YAML and deployment YAML
          - powershell: |
              Write-Host "Injecting secrets into YAML and replacing deployment placeholders..."
              $secretFile = "$(secretFile)"
              $deploymentFile = "$(deploymentFile)"

              function Get-EnvEither($underscore, $hyphen) {
                  # Try underscore first, then hyphen. Use Get-Item to safely access names with hyphens.
                  $val = $null
                  try { $val = (Get-Item -Path ("Env:\" + $underscore) -ErrorAction SilentlyContinue).Value } catch {}
                  if (-not $val) {
                      try { $val = (Get-Item -Path ("Env:\" + $hyphen) -ErrorAction SilentlyContinue).Value } catch {}
                  }
                  return $val
              }

              # Read secrets (accept both underscore and hyphen variants)
              $DB_USER        = Get-EnvEither 'DB_USER' 'DB-USER'
              $DB_PASSWORD    = Get-EnvEither 'DB_PASSWORD' 'DB-PASSWORD'
              $DB_URL         = Get-EnvEither 'DB_URL' 'DB-URL'
              $MAIL_USERNAME  = Get-EnvEither 'MAIL_USERNAME' 'MAIL-USERNAME'
              $MAIL_PASSWORD  = Get-EnvEither 'MAIL_PASSWORD' 'MAIL-PASSWORD'
              $JWT_SECRET_KEY = Get-EnvEither 'JWT_SECRET_KEY' 'JWT-SECRET-KEY'

              # Pipeline variables (expanded by Azure DevOps at runtime)
              $ACR_NAME     = "$(acrName)"
              $IMAGE_NAME   = "$(imageName)"
              $IMAGE_TAG    = "$(imageTag)"

              # Validate files
              if (-not (Test-Path $secretFile)) { Write-Error "Secret file not found: $secretFile"; exit 1 }
              if (-not (Test-Path $deploymentFile)) { Write-Error "Deployment file not found: $deploymentFile"; exit 1 }

              # Show which secret env vars exist (names only)
              Get-ChildItem Env: | Where-Object { $_.Name -match 'DB|MAIL|JWT' } | Sort-Object Name | Select-Object Name

              # Print presence/masked info for the specific secrets (avoid printing values)
              Write-Host "`n--- Secret Presence (masked) ---"
              Write-Host ("DB_USER: " + (if ($DB_USER) { "[SET]" } else { "<missing>" }))
              Write-Host ("DB_PASSWORD: " + (if ($DB_PASSWORD) { "[SET]" } else { "<missing>" }))
              Write-Host ("DB_URL: " + (if ($DB_URL) { "[SET]" } else { "<missing>" }))
              Write-Host ("MAIL_USERNAME: " + (if ($MAIL_USERNAME) { "[SET]" } else { "<missing>" }))
              Write-Host ("MAIL_PASSWORD: " + (if ($MAIL_PASSWORD) { "[SET]" } else { "<missing>" }))
              Write-Host ("JWT_SECRET_KEY: " + (if ($JWT_SECRET_KEY) { "[SET]" } else { "<missing>" }))

              # Replace placeholders in secret YAML (only when the secret value exists)
              $content = Get-Content $secretFile -Raw
              if ($DB_USER)        { $content = $content -replace "<DB_USER>", [Regex]::Escape($DB_USER) }
              if ($DB_PASSWORD)    { $content = $content -replace "<DB_PASSWORD>", [Regex]::Escape($DB_PASSWORD) }
              if ($DB_URL)         { $content = $content -replace "<DB_URL>", [Regex]::Escape($DB_URL) }
              if ($MAIL_USERNAME)  { $content = $content -replace "<MAIL_USERNAME>", [Regex]::Escape($MAIL_USERNAME) }
              if ($MAIL_PASSWORD)  { $content = $content -replace "<MAIL_PASSWORD>", [Regex]::Escape($MAIL_PASSWORD) }
              if ($JWT_SECRET_KEY) { $content = $content -replace "<JWT_SECRET_KEY>", [Regex]::Escape($JWT_SECRET_KEY) }

              Set-Content -Path $secretFile -Value $content -Force
              Write-Host "Replaced secrets in $secretFile"

              # Replace ACR/image details in deployment YAML
              (Get-Content $deploymentFile -Raw) `
                  -replace "<ACR_NAME>", $ACR_NAME `
                  -replace "<IMAGE_NAME>", $IMAGE_NAME `
                  -replace "<TAG>", $IMAGE_TAG |
                  Set-Content $deploymentFile -Force

              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy to AKS using PowerShell script
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(myServiceConnection)"
              ScriptType: 'FilePath'
              ScriptPath: './Pipelines/Backend-CD.ps1'
              ScriptArguments: '$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Deploy Backend to AKS"

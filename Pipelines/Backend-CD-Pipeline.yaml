#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  azureServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kv-banking-app"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch secrets and replace placeholders
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              ScriptType: 'InlineScript'
              Inline: |
                Write-Host "Fetching secrets from Key Vault and replacing YAML placeholders..."

                $keyVaultName = "$(keyVaultName)"
                $secretFile = "$(secretFile)"
                $deploymentFile = "$(deploymentFile)"

                # Fetch secrets from Key Vault
                $DB_USER       = (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "DB_USER").SecretValueText
                $DB_PASSWORD   = (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "DB_PASSWORD").SecretValueText
                $DB_URL        = (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "DB_URL").SecretValueText
                $MAIL_USERNAME = (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "MAIL_USERNAME").SecretValueText
                $MAIL_PASSWORD = (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "MAIL_PASSWORD").SecretValueText
                $JWT_SECRET_KEY= (Get-AzKeyVaultSecret -VaultName $keyVaultName -Name "JWT_SECRET_KEY").SecretValueText

                # Debug: confirm fetched values (optional, remove in production)
                Write-Host "`n--- Fetched Secrets ---"
                Write-Host "DB_USER: $DB_USER"
                Write-Host "DB_PASSWORD: $DB_PASSWORD"
                Write-Host "DB_URL: $DB_URL"
                Write-Host "MAIL_USERNAME: $MAIL_USERNAME"
                Write-Host "MAIL_PASSWORD: $MAIL_PASSWORD"
                Write-Host "JWT_SECRET_KEY: $JWT_SECRET_KEY"

                # Replace placeholders in secret YAML
                $content = Get-Content $secretFile -Raw
                $content = ($content -replace "<DB_USER>", $DB_USER)
                $content = ($content -replace "<DB_PASSWORD>", $DB_PASSWORD)
                $content = ($content -replace "<DB_URL>", $DB_URL)
                $content = ($content -replace "<MAIL_USERNAME>", $MAIL_USERNAME)
                $content = ($content -replace "<MAIL_PASSWORD>", $MAIL_PASSWORD)
                $content = ($content -replace "<JWT_SECRET_KEY>", $JWT_SECRET_KEY)
                Set-Content -Path $secretFile -Value $content -Force
                Write-Host "Replaced secrets in $secretFile"

                # Replace image details in deployment YAML
                $ACR_NAME   = "$(acrName)"
                $IMAGE_NAME = "$(imageName)"
                $IMAGE_TAG  = "$(imageTag)"

                (Get-Content $deploymentFile -Raw) `
                    -replace "<ACR_NAME>", $ACR_NAME `
                    -replace "<IMAGE_NAME>", $IMAGE_NAME `
                    -replace "<TAG>", $IMAGE_TAG |
                    Set-Content $deploymentFile -Force
                Write-Host "Replaced image details in $deploymentFile"

            azurePowerShellVersion: 'LatestVersion'
            displayName: "Fetch KeyVault Secrets & Replace YAML"

          # Deploy to AKS using PowerShell script
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: "$(azureServiceConnection)"
              ScriptType: 'FilePath'
              ScriptPath: './Pipelines/Backend-CD.ps1'
              ScriptArguments: '$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Deploy Backend to AKS"

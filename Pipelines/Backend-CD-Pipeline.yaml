#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backendCI
      source: backend-ci
      trigger:
        branches:
          include:
            - main

variables:
  myServiceConnection: "MyServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "aks-banking-cluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "acrbankingapp"
  imageName: "backend"
  imageTag: "$(resources.pipeline.backendCI.runId)"
  keyVaultName: "kvBankingApp"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    #condition: succeeded('resources.pipeline.backendCI')
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Fetch all secrets from Key Vault
          - task: AzureKeyVault@2
            name: FetchSecrets
            inputs:
              azureSubscription: "$(myServiceConnection)"
              KeyVaultName: "$(keyVaultName)"
              SecretsFilter: 'DB-USER,DB-PASSWORD,DB-URL,MAIL-USERNAME,MAIL-PASSWORD,JWT-SECRET-KEY'
              RunAsPreJob: true
            displayName: "Fetch Secrets from Azure Key Vault"

          # Map Key Vault secrets (with hyphens) to uppercase variables
          - powershell: |
              Write-Host "Mapping Key Vault secrets to uppercase tokens..."
              echo "##vso[task.setvariable variable=DB_USER;issecret=true]$(db-user)"
              echo "##vso[task.setvariable variable=DB_PASSWORD;issecret=true]$(db-password)"
              echo "##vso[task.setvariable variable=DB_URL;issecret=true]$(db-url)"
              echo "##vso[task.setvariable variable=MAIL_USERNAME;issecret=true]$(mail-username)"
              echo "##vso[task.setvariable variable=MAIL_PASSWORD;issecret=true]$(mail-password)"
              echo "##vso[task.setvariable variable=JWT_SECRET_KEY;issecret=true]$(jwt-secret-key)"
            displayName: "Map Key Vault secrets to ReplaceTokens variables"

          # Replace tokens in secret.yaml (using ReplaceTokens marketplace task)
          - task: qetza.replacetokens.replacetokens-task.Replacetokens@3
            displayName: "Replace tokens in secret.yaml"
            inputs:
              targetFiles: "$(secretFile)"
              tokenPattern: "<\\w+>"

          # Get AKS credentials
          - task: AzureCLI@2
            displayName: "Get AKS credentials"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster) --overwrite-existing

          # Apply secret.yaml to AKS
          - task: Kubernetes@1
            displayName: "Apply secret.yaml to AKS"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              azureSubscriptionEndpoint: "$(myServiceConnection)"
              connectionType: "Azure Resource Manager"
              azureResourceGroup: "$(resourceGroup)"
              kubernetesCluster: "$(aksCluster)"
              command: "apply"
              useConfigurationFile: true
              configuration: "$(secretFile)"

          # Replace image details in deployment YAML
          - powershell: |
              Write-Host "Replacing image placeholders in deployment YAML..."
              $deploymentFile = "$(deploymentFile)"
              $ACR_NAME = "$(acrName)"
              $IMAGE_NAME = "$(imageName)"
              $IMAGE_TAG = "$(imageTag)"

              (Get-Content $deploymentFile -Raw) `
                -replace "<ACR_NAME>", $ACR_NAME `
                -replace "<IMAGE_NAME>", $IMAGE_NAME `
                -replace "<TAG>", $IMAGE_TAG |
                Set-Content $deploymentFile -Force

              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy backend to AKS via PowerShell
          - task: AzurePowerShell@5
            displayName: "Deploy Backend to AKS"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              ScriptType: "FilePath"
              ScriptPath: "./Pipelines/Backend-CD.ps1"
              ScriptArguments: "$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(secretFile) $(acrName) $(imageName) $(imageTag)"
              azurePowerShellVersion: "LatestVersion"


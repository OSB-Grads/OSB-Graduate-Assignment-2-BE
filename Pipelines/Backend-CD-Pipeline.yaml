#trigger:
#  branches:
#    include:
#      - main

resources:
  pipelines:
    - pipeline: backend-ci
      source: backend-ci
      trigger:
        branches:
          include:
            - main

pr: none

variables:
  myServiceConnection: "MyAzureServiceConnection"
  resourceGroup: "rg-banking-app"
  aksCluster: "bankcluster"
  namespace: "default"
  deploymentFile: "kubernetes/prod/deployment.yaml"
  serviceFile: "kubernetes/prod/service.yaml"
  secretFile: "kubernetes/prod/secret.yaml"
  acrName: "bankingacr"
  imageName: "backend-ci"
  imageTag: "v$(resources.pipeline.backend-ci.runId)"

stages:
  - stage: Deploy
    displayName: "Deploy Backend to AKS"
    jobs:
      - job: DeployToAKS
        pool:
          name: Default
        steps:
          - checkout: self

          # Replace tokens in secret.yaml using pipeline variables
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Replacing tokens in secret.yaml..."
                $secretPath = "$(secretFile)"
                $content = Get-Content $secretPath -Raw
                $content = $content -replace "DB_USER", "${env:DB_USER}"
                $content = $content -replace "DB_PASSWORD", "${env:DB_PASSWORD}"
                $content = $content -replace "MAIL_USERNAME", "${env:MAIL_USERNAME}"
                $content = $content -replace "MAIL_PASSWORD", "${env:MAIL_PASSWORD}"
                $content = $content -replace "DB_URL", "${env:DB_URL}"
                $content = $content -replace "JWT_SECRET_KEY", "${env:JWT_SECRET_KEY}"
                Set-Content -Path $secretPath -Value $content -Force

          - powershell: |
              Write-Host "Printing secrets (they should be masked if marked secret in pipeline settings)..."
              Write-Host "DB_USER = $env:DB_USER"
              Write-Host "DB_PASSWORD = $env:DB_PASSWORD" 
              Write-Host "DB_URL = $env:DB_URL"
              Write-Host "MAIL_USERNAME = $env:MAIL_USERNAME"
              Write-Host "MAIL_PASSWORD = $env:MAIL_PASSWORD"
              Write-Host "JWT_SECRET_KEY = $env:JWT_SECRET_KEY"
              Write-Host "Finished printing secrets."
            displayName: "Print secrets (DEBUG) - REMOVE AFTER DEBUGGING"

          # Get AKS credentials
          - task: AzureCLI@2
            displayName: "Get AKS credentials"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster) --overwrite-existing

          # Apply secret.yaml to AKS
          - task: Kubernetes@1
            displayName: "Apply secret.yaml to AKS"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              azureSubscriptionEndpoint: "$(myServiceConnection)"
              connectionType: "Azure Resource Manager"
              azureResourceGroup: "$(resourceGroup)"
              kubernetesCluster: "$(aksCluster)"
              command: "apply"
              useConfigurationFile: true
              configuration: "$(secretFile)"

          - script: |
             echo "Fetching updated secret from AKS..."
             kubectl get secret azure-postgres-secret-prod -o yaml
            displayName: "Print updated secret in terminal"

          # Replace image details in deployment YAML
          - powershell: |
              Write-Host "Replacing image placeholders in deployment YAML..."
              $deploymentFile = "$(deploymentFile)"
              $ACR_NAME = "$(acrName)"
              $IMAGE_NAME = "$(imageName)"
              $IMAGE_TAG = "$(imageTag)"

              (Get-Content $deploymentFile -Raw) `
                -replace "<ACR_NAME>", $ACR_NAME `
                -replace "<IMAGE_NAME>", $IMAGE_NAME `
                -replace "<TAG>", $IMAGE_TAG |
                Set-Content $deploymentFile -Force

              Write-Host "Replaced image details in $deploymentFile"
            displayName: "Replace Secret & Deployment Placeholders"

          # Deploy backend to AKS via PowerShell
          - task: AzurePowerShell@5
            displayName: "Deploy Backend to AKS"
            inputs:
              azureSubscription: "$(myServiceConnection)"
              ScriptType: "FilePath"
              ScriptPath: "./Pipelines/Backend-CD.ps1"
              ScriptArguments: "$(resourceGroup) $(aksCluster) $(namespace) $(deploymentFile) $(serviceFile) $(secretFile) $(acrName) $(imageName) $(imageTag)"
              azurePowerShellVersion: "LatestVersion"

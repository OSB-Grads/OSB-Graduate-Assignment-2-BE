package com.bank.webApplication.Orchestrator;

import com.bank.webApplication.Dto.DepositWithdrawDTO;
import com.bank.webApplication.Entity.LogEntity;
import com.bank.webApplication.Entity.TransactionEntity;
import com.bank.webApplication.Services.LogService;
import com.bank.webApplication.Services.TransactionService;
import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import java.util.UUID;

@Slf4j
@Controller
public class DepositAndWithdrawalOrch {

    private TransactionService transactionService;
    private LogService logService;

    @Autowired
    public DepositAndWithdrawalOrch(TransactionService transactionService, LogService logService){
        this.transactionService = transactionService;
        this.logService = logService;
    }

    @Transactional
    public DepositWithdrawDTO depositHandler(UUID userId, String accountNumber, double amount) {
        DepositWithdrawDTO depositOperation = transactionService.depositAmount(accountNumber,amount);
        if (depositOperation != null ) {
            transactionService.saveTransaction(null, accountNumber, amount, "Deposit Transaction Save Successful :)", TransactionEntity.type.DEPOSIT, TransactionEntity.status.COMPLETED);
            log.info("[Deposit Handler] Deposit Operation Successful :) ");
            logService.logintoDB(userId, LogEntity.Action.TRANSACTIONS, "Deposit Successful", String.valueOf(userId), LogEntity.Status.SUCCESS);
            log.info("[Deposit Handler] Transaction Saved Successfully in Logs");
            return depositOperation;
        } else {
            log.error("[Deposit Handler] Deposit Operation Failed. Please Try Again");
            logService.logintoDB(userId, LogEntity.Action.TRANSACTIONS, "Deposit Failed", String.valueOf(userId), LogEntity.Status.FAILURE);
            return depositOperation;
        }
    }

    @Transactional
    public DepositWithdrawDTO WithdrawalHandler(UUID userId, String accountNumber, double amount){
        DepositWithdrawDTO withdrawOperation = transactionService.withdrawAmount(accountNumber, amount);
        if (withdrawOperation != null){
            transactionService.saveTransaction(accountNumber,null, amount, "Withdrawal Transaction save Successful :)", TransactionEntity.type.WITHDRAWAL, TransactionEntity.status.COMPLETED);
            log.info("[Withdrawal Handler] Withdraw Operation Successful :) ");
            logService.logintoDB(userId, LogEntity.Action.TRANSACTIONS, "Withdrawal Successful", String.valueOf(userId), LogEntity.Status.SUCCESS);
            log.info("[Withdrawal Handler] Transaction Saved Successfully in Logs");
            return withdrawOperation;
        }
        else {
            log.error("[Withdrawal Handler] Withdraw Operation Failed. Please Try Again ");
            logService.logintoDB(userId, LogEntity.Action.TRANSACTIONS, "Withdrawal Failed", String.valueOf(userId),LogEntity.Status.FAILURE );
            return withdrawOperation;
        }
    }

}












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































